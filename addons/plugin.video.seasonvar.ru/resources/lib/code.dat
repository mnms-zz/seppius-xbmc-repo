
#---------- set cookies --------------------------------------------------------
def Get_Cookies(soup):

    cookie = ''
    #-- get cookies from HTML page

    #-- get cookies
    for r in soup.findAll('script'): #, {'type':'text/javascript'}):
        #-- get cookies from HTML page
        if '$.cookie(' in r.text:
            txt = r.text
            txt = re.sub(re.compile("/\*.*?\*/",re.DOTALL ) ,"" ,txt)

            rc = re.compile('\$\.cookie\(\'(.+?)\', \'(.+?)\'\);').findall(txt) # , re.MULTILINE|re.DOTALL
            if len(rc) == 0:
                rc = re.compile('\$\.cookie\("(.+?)", "(.+?)"\);').findall(txt)
                if len(rc) == 0:
                    rc = re.compile('function (.+?){(.+?)}', re.MULTILINE|re.DOTALL).findall(txt)
                    for rec in rc:
                        if '$.cookie' in rec[1]:
                            r = re.compile('(.+?)\(').findall(rec[0])
                            fname = r[0]
                            for fn in re.compile(fname+'\((.+?)\)', re.MULTILINE|re.DOTALL).findall(txt):
                                if '"' in fn or '\'' in fn:
                                    cookie += fn.split(',')[0].replace('"','').replace('\'','').strip() +'='+fn.split(',')[1].replace('"','').replace('\'','').strip() +';'
                else:
                    for rec in rc:
                        cookie += rec[0]+'='+rec[1]+';'
            else:
                for rec in rc:
                    cookie += rec[0]+'='+rec[1]+';'

        #-- get cookies from java scripts
        l = re.compile('<script type="text\/javascript" src="(.+?)"><\/script>', re.MULTILINE|re.DOTALL).findall(str(r))
        try:
            if 'http://' in l[0]:
                url = l[0]
            else:
                url = 'http://seasonvar.ru'+l[0]

            xbmc.log('*** '+url)
            post = None
            request = urllib2.Request(url, post)

            request.add_header('User-Agent', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C)')
            request.add_header('Host',	'seasonvar.ru')
            request.add_header('Accept', '*/*')
            request.add_header('Accept-Language', 'ru-RU')
            request.add_header('Referer',	'http://seasonvar.ru')

            try:
                f = urllib2.urlopen(request)
            except IOError, e:
                if hasattr(e, 'reason'):
                    xbmc.log('We failed to reach a server. Reason: '+ e.reason)
                elif hasattr(e, 'code'):
                    xbmc.log('The server couldn\'t fulfill the request. Error code: '+ str(e.code))

            html = f.read()
            html = re.sub(re.compile("/\*.*?\*/",re.DOTALL ) ,"" ,html)

            r = re.compile('\$\.cookie\(\'(.+?)\', \'(.+?)\'\);').findall(html) # , re.MULTILINE|re.DOTALL

            for rec in r:
                xbmc.log('*** '+str(rec[1]))
                cookie += rec[0]+'='+rec[1]+';'
        except:
            pass

    xbmc.log('*** Cookie: '+cookie)
    return cookie

#---------- get play list ------------------------------------------------------
def Get_PlayList(soup, parent_url):
    #-- get play list url
    for rec in soup.findAll('script', {'type':'text/javascript'}):
        if rec.text.find('swfobject.embedSWF') > -1:
            z = rec.text.replace('$.post("','[').replace('", {',']')
            urlx = re.compile('\$\.post\("(.+?)", \{"(.+?)":"(.+?)"\}', re.MULTILINE|re.DOTALL).findall(rec.text)
            url = 'http://seasonvar.ru/'+urlx[0][0]
            code1 = urlx[0][1]
            code2 = urlx[0][2]
            break

    values = {code1 : code2}
    post = urllib.urlencode(values)

    request = urllib2.Request(url, post)

    request.add_header('User-Agent', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C)')
    request.add_header('Host',	'seasonvar.ru')
    request.add_header('Accept', '*/*')
    request.add_header('Accept-Language', 'ru-RU')
    request.add_header('Referer',	parent_url)
    request.add_header('Content-Type',	'application/x-www-form-urlencoded')
    request.add_header('Cookie',	Get_Cookies(soup)) # TejndE37EDj8790=MTMzMzk3Njg1ODIxNTg3OTA3NDM=; p_r8790=; d_s8790=2; MG_8790=2; TejndE37EDj3064=MTMzMzk3Njg1OTc3OTMwNjQ5NDU=; p_r3064=; d_s3064=2; MG_3064=2')
    request.add_header('X-Requested-With',	'XMLHttpRequest')

    try:
        f = urllib2.urlopen(request)
    except IOError, e:
        if hasattr(e, 'reason'):
            xbmc.log('We failed to reach a server. Reason: '+ e.reason)
        elif hasattr(e, 'code'):
            xbmc.log('The server couldn\'t fulfill the request. Error code: '+ e.code)

    html = f.read()
    url = 'http://seasonvar.ru/' + xppod.Decode(html)

    # -- get play list
    post = None
    request = urllib2.Request(url, post)

    request.add_header('User-Agent', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C)')
    request.add_header('Host',	'seasonvar.ru')
    request.add_header('Accept', '*/*')
    request.add_header('Accept-Language', 'ru-RU')
    request.add_header('Referer',	'http://seasonvar.ru')

    try:
        f = urllib2.urlopen(request)
    except IOError, e:
        if hasattr(e, 'reason'):
            xbmc.log('We failed to reach a server. Reason: '+ e.reason)
        elif hasattr(e, 'code'):
            xbmc.log('The server couldn\'t fulfill the request. Error code: '+ e.code)

    html = f.read()
    html = xppod.Decode(html)

    return re.compile('{(.+?)}', re.MULTILINE|re.DOTALL).findall(html.replace('{"playlist":[', ''))
